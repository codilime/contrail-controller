# -*- mode: python; -*-

import os
import re
import subprocess
import sys
from distutils.dir_util import copy_tree
from shutil import copyfile

vpath = '#/third_party/tbb-2017_U7'

env = DefaultEnvironment()

if env['TARGET_ARCH'] == 'x86':
   arch = 'ia32'
else:
   arch = 'intel64'

vcversion = 'vc14'
bindir = r'build\windows_' + arch + '_cl_' + vcversion +'_' + env['TARGET_CONFIG'] #debug is default for now
abs_vpath = Dir(vpath).abspath

def build_tbb_for_windows(target,source,env):
    srcdir = Dir(vpath +'/include/tbb').abspath
    destdir = Dir('#/build/include/tbb').abspath
    copy_tree(srcdir, destdir)
    BUILD_ENV = {'PATH': env['ENV']['PATH'],
              'tbb_build_dir': Dir('.').abspath,'tbb_root': Dir(vpath).abspath,'runtime':'vc14'
            }
    subprocess.call("make tbb", cwd=abs_vpath)
    
    if not os.path.exists(env.Dir(env['TOP_BIN']).abspath):
        os.makedirs(env.Dir(env['TOP_BIN']).abspath)
    copyfile(os.path.join(abs_vpath, bindir, "tbb_debug.dll"), os.path.join(env.Dir(env['TOP_BIN']).abspath, 'tbb_debug.dll'))
    copyfile(os.path.join(abs_vpath, bindir, "tbb_debug.lib"), os.path.join(env.Dir(env['TOP_LIB']).abspath, 'tbb_debug.lib'))
    

#shutil.copytree()

#os.symcopy(Dir(vpath + '/include/tbb').abspath, Dir('#/build/include/tbb').abspath)
env.Command(['#build/lib/tbb_debug.lib', '#/build/include/tbb/mutex.h'], Dir(vpath), build_tbb_for_windows)

